@use 'variables' as *;
@use 'sass:math';

// Function used inside fluid-type mixin which removes unit from number
@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1)
}

// Responsive font size
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {

  // Returns a string representation of a numbers units
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  // If all units are the same type( px == px  )
  @if $u1 ==$u2 and $u1 ==$u3 and $u1 ==$u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        // 10px + ( 24 - 10 ) * ((100vw - 320px) / ( 1700 - 320 ) =  10px + 14 * ((100vw - 320px) / 1380 )  
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(type-of($raw-query)=='string',
      unquote($raw-query),
      inspect($raw-query));

    @media #{$query} {
      @content;
    }
  }

  @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}